@page "/CreatePoll"
@using Data
@using Models.Polls

@inject IPollRepository PollRepository
@inject NavigationManager NavigationManager

<EditForm Model="@NewPoll" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText Class="form-control" id="name" @bind-Value="NewPoll.Name" />
        <ValidationMessage For="@(() => NewPoll.Name)" />
    </div>
    <div class="form-group">
        <label for="source">Source:</label>
        <InputText Class="form-control" id="source" @bind-Value="NewPoll.CreatorLogin" />
        <ValidationMessage For="@(() => NewPoll.CreatorLogin)" />
    </div>
    @*<div class="form-group">
            <label for="coolfactor">Cool Factor:</label>

            <InputSelect Class="form-control" id="coolfactor" @bind-Value="NewPoll.CoolFactor">
                @foreach (var f in Enum.GetValues(typeof(CoolFactor)))
                {
                    <option value="@f">@f.ToString()</option>
                }
            </InputSelect>
        </div>*@
    @foreach(var Question in NewPoll.Questions)
    {

    }
    <button type="submit" class="btn btn-primary">Save Changes</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    
</EditForm>

@code {
    public Poll NewPoll { get; set; }

    protected override void OnInitialized()
    {
        NewPoll = new Poll();
    }
    void BackToList()
    {
        NavigationManager.NavigateTo("/");
    }

    void Cancel()
    {
        BackToList();
    }

    void ValidSubmit()
    {
        //DataLayer.SubmitChanges(Trophy);
        PollRepository.Add(NewPoll);
        BackToList();
    }

}
